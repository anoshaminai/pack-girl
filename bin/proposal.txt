=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=
CIS 120 Game Project Proposal
PennKey: anosha
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=

===============
=: Your Game :=
===============

- What game are you planning to implement? If it is a game of your own design,
  or not especially well-known, provide a 2-3 sentence description of the game.
  
   My game is a game similar to PacMan that I am calling Pack-Man, which is about me
  getting ready to go home for break. I need to navigate the maze (of my room) to 
  collect clothing to fill my suitcase before my ride to the airport gets here. 
  I also need to pick up enough trash to fill my trash can. I can only hold a certain number
  of items at a time, and need to physically go to the suitcase or trash can to deposit the correct
  materials. In the first level, making sure I pack my suitcase and fill my trash can in 
  time will be enough, but in higher levels I will also need to avoid angry friends who 
  are trying to corner me and yell at me about borrowing too many of their things 
  and forgetting to return them.

- What classes and interfaces do you plan to create? How will the different
  components of your game (the model, the GUI, etc.) interact?
  
  Board class: represents the location of the items on the board, refreshes
  as avatar moves, maintains game state
  Avatar class: representing me, able to move around the board and collect items
  Item interface: Items have a point value, an image (how they are represented 
  on the screen), a location (on the board), and what to do when deposited
  Clothing class (implements Item): has point value depending on type, & image, when 
  deposited checks if the Deposit is a suitcase and if so, adds point value to it
  Trash class (implements Item): has point value depending on type, & image, when
  deposited checks if the Deposit is a trash can and if so, adds point value to it
  Deposit class: has a current point value, a max point value, an image, a type,
  and an ability to have it's current value change
  Friends class: move around on board, have location
  
  As items are collected, the point values for suitcase and trash can (displayed on
  the GUI) will increase. The items will also disappear from the board and the avatar
  will continue to move around.

- What do you think will be the most challenging thing to implement?
  
  I think maintaining the board state will be difficult. There are many edge cases and 
  figuring out how the board will react will be challenging. For example, if the user
  has collected their max # of items, what should happen when they walk over an object?
  Does the object image stay there, under the avatar? Does it temporarily disapppear 
  and reappear? Is the user not able to walk over it? I think though this game doesn't
  involve many complicated motion graphics it does have some challenging graphical elements.
  I also think keeping the item collection / deposit logic clear may be challenging, and
  especially in trying to keep from being redundant. To keep the logic correct information
  needs to be shared between several parts (the user, the suitcase, the board, the item) and 
  I need to make sure that I am not making every object carry information it doesn't need to.
  
====================
=: Core Concept 1 :=
====================

Concept 1: Modeling state using 2-D arrays or collections

- What specific feature of your game will be implemented using this concept?
 
  The board of the game will be modeled using a 2-D array. Every cell in the array will 
  represent a potential location for an item, an obstacle, or a blank space. As the avatar
  moves around, the current state of the spaces into which the avatar moves (whether it 
  contains clothes, an obstacle, etc) will determine how the game state changes. 

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
  The board has a fixed size and # of locations, which arrays can represent. Most
  importantly, arrays allow for quick and easy random access - I need to be able to 
  access not only the avatar's current location & potential next moves, but also 
  other parts of the board (for friends). 

====================
=: Core Concept 2 :=
====================

Concept 2: Object-oriented design using inheritance and subtyping

- What specific feature of your game will be implemented using this concept?
  
  There will be an Item interface which specifies that all items must have an associated 
  image (how they will be represented on screen), a point value, and an actionOnDeposit.
  Clothes and Trash will be abstract classes implementing Item that will implement the 
  actionOnDeposit method. Types of clothes (pants, shirts, etc) and types of trash
  (cans, old notes, etc) will be subclasses of either Clothes or Trash. 

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
  Every Item on the screen has the same basic needs - to be collected, to be represented
  visually, and to have some value, and to be deposited. This is true of both Clothes and
  Trash. The only way that the user interacts with these items is through collecting them 
  & depositing them. Clothes and Trash act the same way when collected but react differently 
  when deposited - Clothes add their point value to the suitcase total (only if at the suitcase)
  and Trash add their point value to the trash can total (only if at the trash can). Since the 
  user only interacts with them in one way (collecting and adding to their list of held items 
  and depositing at Deposit objects), it makes sense to have the Item interface so that the 
  user only needs to interact with the objects as Items, and to encapsulate their particular 
  behavior in a class. The user doesn't need to check the Item type when collected, the user
  only cares when they are depositing and that check can be contained in the Items themselves.
  Furthermore, it makes sense to have these be abstract classes because I am creating several 
  types of Clothes and Trash, and I am not allowing there to be a generic Clothes item or Trash 
  item. All Clothes behave one way (so they need the same actoinOnDeposit method), and same 
  with Trash - the only things that differ are their appearance and their point value. These 
  can be set in the type subclasses. This structure also allows me to easily add new Clothes 
  and Trash types and to change the behavior on deposit to increase the complexity of the game 
  without having to change the game logic much, if at all. 

====================
=: Core Concept 3 :=
====================

Concept 3: Using JUnit to test some features of your model

- What specific feature of your game will be implemented using this concept?
  
  I will test different collection situations - what happens when you are carrying the
  max # of items and you move through locations that have items in them? What happens when
  you make a deposit at the suitcase while carrying both clothes and trash? Only clothes? 
  Only trash? What about at the trash can? What happens when one Deposit is full and you
  collect more items of that type? What happens if you try to deposit items into a full
  Deposit? What happens if only one Deposit is full but the timer runs out?

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
  Maintaining the difference between Clothes and Trash and how the user can interact
  with them depending on the state of the suitcase and trash can - both during collection
  and deposit - is the main game logic. It is important that the game logic of how full
  these Deposits are, how many items the user is carrying, and what type these items are
  is correct in order for the game to work at all, so testing them is logical and not a 
  misuse of testing.


====================
=: Core Concept 4 :=
====================

Concept 4: Using I/O to parse a novel file format

- What specific feature of your game will be implemented using this concept?
  
  The game will be able to take in a file that specifies the location of different items
  on the board as well as obstacles, suitcase, and trash can location. 

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
  The game is interesting and fun depending on how difficult it is to navigate
  the room and collect an appropriate # of items in the amount of time. Making more 
  challenging configurations will make the game more fun - and adding the customizable
  element allows the game to continually change with time.
